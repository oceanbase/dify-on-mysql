"""upgrade to 1.7.0

Revision ID: 7aefe33a8deb
Revises: 37c2bb41f84a
Create Date: 2025-08-07 16:53:58.127924

"""
from alembic import op
import models
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '7aefe33a8deb'
down_revision = '37c2bb41f84a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenant_plugin_auto_upgrade_strategies',
    sa.Column('id', models.types.StringUUID(), nullable=False),
    sa.Column('tenant_id', models.types.StringUUID(), nullable=False),
    sa.Column('strategy_setting', sa.String(length=16), server_default='fix_only', nullable=False),
    sa.Column('upgrade_time_of_day', sa.Integer(), nullable=False),
    sa.Column('upgrade_mode', sa.String(length=16), server_default='exclude', nullable=False),
    sa.Column('exclude_plugins', sa.JSON(), nullable=False),
    sa.Column('include_plugins', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id', name='tenant_plugin_auto_upgrade_strategy_pkey'),
    sa.UniqueConstraint('tenant_id', name='unique_tenant_plugin_auto_upgrade_strategy')
    )
    op.create_table('tool_oauth_system_clients',
    sa.Column('id', models.types.StringUUID(), nullable=False),
    sa.Column('plugin_id', sa.String(length=512), nullable=False),
    sa.Column('provider', sa.String(length=255), nullable=False),
    sa.Column('encrypted_oauth_params', mysql.LONGTEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='tool_oauth_system_client_pkey'),
    sa.UniqueConstraint('plugin_id', 'provider', name='tool_oauth_system_client_plugin_id_provider_idx')
    )
    op.create_table('tool_oauth_tenant_clients',
    sa.Column('id', models.types.StringUUID(), nullable=False),
    sa.Column('tenant_id', models.types.StringUUID(), nullable=False),
    sa.Column('plugin_id', sa.String(length=255), nullable=False),
    sa.Column('provider', sa.String(length=255), nullable=False),
    sa.Column('enabled', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('encrypted_oauth_params', mysql.LONGTEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='tool_oauth_tenant_client_pkey'),
    sa.UniqueConstraint('tenant_id', 'plugin_id', 'provider', name='unique_tool_oauth_tenant_client')
    )
    with op.batch_alter_table('api_based_extensions', schema=None) as batch_op:
        batch_op.alter_column('api_key',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=False)

    with op.batch_alter_table('app_model_configs', schema=None) as batch_op:
        batch_op.alter_column('model',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=True)

    with op.batch_alter_table('data_source_api_key_auth_bindings', schema=None) as batch_op:
        batch_op.alter_column('credentials',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=True)

    with op.batch_alter_table('external_knowledge_bindings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('external_knowledge_bindings_external_knowledge_idx'))
        batch_op.alter_column('external_knowledge_id',
               existing_type=mysql.CHAR(length=36),
               type_=mysql.LONGTEXT(),
               existing_nullable=False)

    with op.batch_alter_table('recommended_apps', schema=None) as batch_op:
        batch_op.alter_column('custom_disclaimer',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=False)

    with op.batch_alter_table('sites', schema=None) as batch_op:
        batch_op.alter_column('custom_disclaimer',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=False)

    with op.batch_alter_table('tool_api_providers', schema=None) as batch_op:
        batch_op.alter_column('custom_disclaimer',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=False)

    with op.batch_alter_table('tool_builtin_providers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.String(length=256), nullable=False))
        batch_op.add_column(sa.Column('is_default', sa.Boolean(), server_default=sa.text('false'), nullable=False))
        batch_op.add_column(sa.Column('credential_type', sa.String(length=32), nullable=False))
        batch_op.add_column(sa.Column('expires_at', sa.BigInteger(), server_default=sa.text('-1'), nullable=False))
        batch_op.drop_constraint(batch_op.f('unique_builtin_tool_provider'), type_='unique')
        batch_op.create_unique_constraint('unique_builtin_tool_provider', ['tenant_id', 'provider', 'name'])

    with op.batch_alter_table('tool_mcp_providers', schema=None) as batch_op:
        batch_op.alter_column('server_identifier',
               existing_type=mysql.VARCHAR(length=24),
               type_=sa.String(length=64),
               existing_nullable=False)

    with op.batch_alter_table('tool_model_invokes', schema=None) as batch_op:
        batch_op.alter_column('tool_name',
               existing_type=mysql.VARCHAR(length=40),
               type_=sa.String(length=128),
               existing_nullable=False)

    with op.batch_alter_table('upload_files', schema=None) as batch_op:
        batch_op.alter_column('source_url',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=False)

    with op.batch_alter_table('workflow_draft_variables', schema=None) as batch_op:
        batch_op.alter_column('value',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=False)

    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.alter_column('outputs',
               existing_type=mysql.TEXT(),
               type_=mysql.LONGTEXT(),
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.alter_column('outputs',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=True)

    with op.batch_alter_table('workflow_draft_variables', schema=None) as batch_op:
        batch_op.alter_column('value',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('upload_files', schema=None) as batch_op:
        batch_op.alter_column('source_url',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('tool_model_invokes', schema=None) as batch_op:
        batch_op.alter_column('tool_name',
               existing_type=sa.String(length=128),
               type_=mysql.VARCHAR(length=40),
               existing_nullable=False)

    with op.batch_alter_table('tool_mcp_providers', schema=None) as batch_op:
        batch_op.alter_column('server_identifier',
               existing_type=sa.String(length=64),
               type_=mysql.VARCHAR(length=24),
               existing_nullable=False)

    with op.batch_alter_table('tool_builtin_providers', schema=None) as batch_op:
        batch_op.drop_constraint('unique_builtin_tool_provider', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('unique_builtin_tool_provider'), ['tenant_id', 'provider'])
        batch_op.drop_column('expires_at')
        batch_op.drop_column('credential_type')
        batch_op.drop_column('is_default')
        batch_op.drop_column('name')

    with op.batch_alter_table('tool_api_providers', schema=None) as batch_op:
        batch_op.alter_column('custom_disclaimer',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('sites', schema=None) as batch_op:
        batch_op.alter_column('custom_disclaimer',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('recommended_apps', schema=None) as batch_op:
        batch_op.alter_column('custom_disclaimer',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('external_knowledge_bindings', schema=None) as batch_op:
        batch_op.alter_column('external_knowledge_id',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.CHAR(length=36),
               existing_nullable=False)
        batch_op.create_index(batch_op.f('external_knowledge_bindings_external_knowledge_idx'), ['external_knowledge_id'], unique=False)


    with op.batch_alter_table('data_source_api_key_auth_bindings', schema=None) as batch_op:
        batch_op.alter_column('credentials',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=True)

    with op.batch_alter_table('app_model_configs', schema=None) as batch_op:
        batch_op.alter_column('model',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=True)

    with op.batch_alter_table('api_based_extensions', schema=None) as batch_op:
        batch_op.alter_column('api_key',
               existing_type=mysql.LONGTEXT(),
               type_=mysql.TEXT(),
               existing_nullable=False)

    op.drop_table('tool_oauth_tenant_clients')
    op.drop_table('tool_oauth_system_clients')
    op.drop_table('tenant_plugin_auto_upgrade_strategies')
    # ### end Alembic commands ###
